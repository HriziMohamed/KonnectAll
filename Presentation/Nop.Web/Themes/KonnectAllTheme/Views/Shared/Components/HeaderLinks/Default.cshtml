@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper



<div id="topbar-menu" class="topbar-menu">

    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })

    @if (!Model.IsAuthenticated)
    {

        var returnUrl = webHelper.GetRawUrl(Context.Request);
        <a href="@Url.RouteUrl("Login", new { returnUrl })" class="btn btn-login"><i class="fa fa-gear"></i> <span>@T("Account.Login")</span></a>


    }
   

    @if (!Model.IsAuthenticated)
    {
        var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
        ? url.ToString()
        : webHelper.GetRawUrl(Context.Request);
        @if (Model.RegistrationType != UserRegistrationType.Disabled)
        {

            <a href="@Url.RouteUrl("Register", new { returnUrl })" class="btn btn-account"><i class="fa fa-user"></i> <span>@T("Account.Register")</span></a>

        }

    }
    else
    {

        <a href="@Url.RouteUrl("CustomerInfo")" class="ico-account btn btn-login">
            <i class="fa fa-user"></i>
            <span>@Model.CustomerName</span>
        </a>
    }
    @if (Model.WishlistEnabled && Model.IsAuthenticated)
    {

        <a href="@Url.RouteUrl("Wishlist")" class="btn btn-login">
            <i class="fa fa-heart"></i>
            <span class="wishlist-label">@T("Wishlist")</span>
            <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
        </a>

    }

    @if (Model.AllowPrivateMessages)
    {

        <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="btn btn-login">
            <i class="fa fa-envelope"></i>
            <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
            <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
        </a>

    }


    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })

    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }

    <a href="#">
        <img class="brand-icon" src="../images/header/brand.png">
    </a>

    @if (Model.ShoppingCartEnabled)
    {

        <a href="@Url.RouteUrl("ShoppingCart")" class="icon-cart">
            <img class="cart-icon" src="../images/header/cart.png">
            <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
        </a>
        <ul class="dropdown-menu" role="menu">
            @await Component.InvokeAsync("FlyoutShoppingCart")
        </ul>

    }

     @if (Model.IsAuthenticated)
    {
        <a href="@Url.RouteUrl("Logout")" class="btn btn-account"><i class="fa fa-gear"></i> <span>@T("Account.Logout")</span></a>
    }
</div>
